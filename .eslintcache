[{"D:\\Dev\\covinsights\\src\\components\\Calculator\\RiskCalculator.js":"1","D:\\Dev\\covinsights\\src\\components\\FamilyGathering\\Gatherer.js":"2","D:\\Dev\\covinsights\\src\\components\\Navbar.js":"3","D:\\Dev\\covinsights\\src\\components\\Calculator\\MyMath.js":"4","D:\\Dev\\covinsights\\src\\components\\FamilyGathering\\PersonCard.js":"5","D:\\Dev\\covinsights\\src\\reportWebVitals.js":"6","D:\\Dev\\covinsights\\src\\components\\Calculator\\RiskForm.js":"7","D:\\Dev\\covinsights\\src\\css\\GlobalStyle.js":"8","D:\\Dev\\covinsights\\src\\index.js":"9","D:\\Dev\\covinsights\\src\\pages\\Error.js":"10","D:\\Dev\\covinsights\\src\\pages\\home.js":"11","D:\\Dev\\covinsights\\src\\pages\\calculator.js":"12","D:\\Dev\\covinsights\\src\\components\\Calculator\\Evolution.js":"13","D:\\Dev\\covinsights\\src\\pages\\familyGathering.js":"14","D:\\Dev\\covinsights\\src\\css\\ContactFormWrapper.js":"15","D:\\Dev\\covinsights\\src\\components\\Layout.js":"16","D:\\Dev\\covinsights\\src\\css\\Theme.js":"17","D:\\Dev\\covinsights\\src\\components\\constants\\activities.js":"18","D:\\Dev\\covinsights\\src\\css\\CardWrapper.js":"19"},{"size":9479,"mtime":1606579748366,"results":"20","hashOfConfig":"21"},{"size":10754,"mtime":1606569044007,"results":"22","hashOfConfig":"21"},{"size":3248,"mtime":1606493711702,"results":"23","hashOfConfig":"21"},{"size":13395,"mtime":1606578927831,"results":"24","hashOfConfig":"21"},{"size":5735,"mtime":1606473991995,"results":"25","hashOfConfig":"21"},{"size":362,"mtime":1606158119788,"results":"26","hashOfConfig":"21"},{"size":12322,"mtime":1606578509557,"results":"27","hashOfConfig":"21"},{"size":5065,"mtime":1606505094016,"results":"28","hashOfConfig":"21"},{"size":570,"mtime":1606243143661,"results":"29","hashOfConfig":"21"},{"size":178,"mtime":1606164334149,"results":"30","hashOfConfig":"21"},{"size":361,"mtime":1606325165424,"results":"31","hashOfConfig":"21"},{"size":542,"mtime":1606413706058,"results":"32","hashOfConfig":"21"},{"size":2316,"mtime":1606577341590,"results":"33","hashOfConfig":"21"},{"size":596,"mtime":1606414073812,"results":"34","hashOfConfig":"21"},{"size":785,"mtime":1606076399231,"results":"35","hashOfConfig":"21"},{"size":411,"mtime":1606221119759,"results":"36","hashOfConfig":"21"},{"size":345,"mtime":1606076399382,"results":"37","hashOfConfig":"21"},{"size":2831,"mtime":1606323538109,"results":"38","hashOfConfig":"21"},{"size":1729,"mtime":1606076399209,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qm2kwn",{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\covinsights\\src\\components\\Calculator\\RiskCalculator.js",["86","87"],"D:\\Dev\\covinsights\\src\\components\\FamilyGathering\\Gatherer.js",["88","89","90"],"import React, { Component } from \"react\"\r\nimport PersonCard from \"./PersonCard.js\"\r\nimport Fab from \"@material-ui/core/Fab\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport AddIcon from \"@material-ui/icons/Add\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Chip from '@material-ui/core/Chip';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport profiles from '../constants/profiles.js';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport {InteractionOne, BasicUniverse} from '../Calculator/MyMath.js';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\n/*\r\n**********\r\n** TODO **\r\n**********\r\n\r\nAjouter des cases pour le type de réunion familiale (une ligne en bas)\r\n-> masque ou non, intérieur/extérieur, \r\n*/\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n      },\r\n    },\r\n  });\r\n\r\nclass Gathering extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        // globalRisk contains the person Risk derived from the calculator.\r\n        this.state={people:{}, peopleCards:[], nextId:0, toggleResult:false, result:[], globalRisk:0,\r\n        masks:false, outdoors:false, duration:300, talking:\"normal\", distance:\"normal\", universe:new BasicUniverse()}\r\n        this.defaultPersonArgs = {\r\n            name:\"Bobby\",\r\n            age: 20,\r\n            gender: \"ND\",\r\n            risk:0,\r\n        };\r\n        this.refResult = React.createRef();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.addPerson(this.defaultPersonArgs);\r\n    }\r\n\r\n    // We only add the card, the person is added on submit.\r\n    addPerson = (args) => {\r\n        const myId = this.state.nextId;\r\n        const myNewCard = (\r\n            <Grid item className=\"person_list\">\r\n                <PersonCard id={myId} showForm={false} updatePerson={this.updatePerson} delete={this.clear} {...args} />\r\n            </Grid>\r\n          )\r\n        this.setState({ nextId: this.state.nextId + 1 });\r\n        var myCards = this.state.peopleCards.slice();\r\n        myCards.push(myNewCard);\r\n        this.setState({ peopleCards:myCards });\r\n    }\r\n\r\n    // For a premade, we directly enter the person\r\n    addPremadePerson = (args) => {\r\n        const myId = this.state.nextId;\r\n        const myNewCard = (\r\n            <Grid item className=\"person_list\">\r\n                <PersonCard id={myId} showForm={true} updatePerson={this.updatePerson} delete={this.clear} {...args} />\r\n            </Grid>\r\n          )\r\n        this.setState({ nextId: this.state.nextId + 1 });\r\n        var myCards = this.state.peopleCards.slice();\r\n        var myPeople = this.state.people;\r\n        var ageFactors = this.state.universe.ageFactors(args.age, args.gender);\r\n        myPeople[myId] = [ageFactors, args.risk];\r\n        myCards.push(myNewCard);\r\n        this.setState({ peopleCards:myCards });\r\n    }\r\n\r\n    clear = id => {\r\n        // Updating the cards and the people.\r\n        var myCards = this.state.peopleCards.slice();\r\n        var myPeople = this.state.people;\r\n        myCards[id] = <div />\r\n        delete myPeople[id];\r\n        this.setState({ peopleCards: myCards, people:myPeople})\r\n    }\r\n\r\n    clearAll = () => {\r\n        this.setState({ nextId: 0, peopleCards: [], people:{}, toggleResult:false });\r\n    }\r\n\r\n    // Called by the children on mount and submit\r\n    updatePerson = (id, age, gender, risk) => {\r\n        var myPeople = this.state.people;\r\n        var ageFactors = this.state.universe.ageFactors(age, gender);\r\n        myPeople[id] = [ageFactors, risk];\r\n        this.setState({people:myPeople});\r\n      }\r\n\r\n    generatePremadeCards = () => {\r\n    const { classes } = this.props;\r\n    return (\r\n        <div id=\"premade_cards\" className={classes.root}>\r\n            {profiles.map((item, index) => {\r\n            return (\r\n                    <Chip icon={<FaceIcon />} label={item.name} clickable onClick={() => {this.addPremadePerson(item)}} />\r\n            )\r\n            })}\r\n        </div>\r\n    )\r\n    }\r\n\r\n    toggleResult = () => {\r\n        this.setState({toggleResult:true});\r\n    }\r\n\r\n    // Compute the probability that someone is hospitalized, goes to ICU, and dies.\r\n    computeResult = () => {\r\n        /*\r\n\t\tFormulas :\r\n\t\t- Mean number of people hospitalized : sum(p_hosp)\r\n        - Probability that at least one person is hospitalized : 1 - prod(1-p_hosp)\r\n        - Attention, les risques sont entrés par les gens sous forme de pourcentages !!\r\n\t\t*/\r\n\t\tvar risk = 1.0;\r\n\t\tvar hospRisk = 1.0;\r\n\t\tvar reaRisk = 1.0;\r\n\t\tvar deathRisk = 1.0;\r\n\t\tvar moyenneHosp = 0.0;\r\n\t\tvar moyenneRea = 0.0;\r\n\t\tvar moyenneDeaths = 0.0;\r\n        var i;\r\n        var interaction = new InteractionOne(\"Family gathering\", this.state.duration, this.state.masks, this.state.masks,\r\n            this.state.talking, this.state.outdoors, this.state.distance);\r\n        var interactionRisk = interaction.getActivityRisk();\r\n        // Using the risk from the calculator.\r\n        // We only compute the risk for his family.\r\n        risk = risk *(1-this.props.globalRisk);\r\n\t\tfor(var key in this.state.people){\r\n            // The risk passed by the person via the simulator.\r\n\t\t\tvar myRisk = this.state.people[key][1] / 100\r\n\t\t\t// We update the probability that no-one has the disease\r\n            risk = risk * (1-myRisk);\r\n            console.log(this.state.people[key])\r\n\t\t\tfor(var current in this.state.people){\r\n                if(current != key){\r\n                    // Updating the risk for person i by taking into account the possible\r\n\t\t\t\t    // contamination by person j.\r\n\t\t\t\t    myRisk = myRisk + (1-myRisk)*interactionRisk*this.state.people[current][1]/100;\r\n                }\r\n            }\r\n            myRisk = myRisk + (1-myRisk)*interactionRisk*this.props.globalRisk;\r\n\t\t\tvar hospProba = this.state.people[key][0][0]\r\n\t\t\tvar reaProba = this.state.people[key][0][1]\r\n\t\t\tvar deathProba = this.state.people[key][0][2]\r\n\t\t\t// Updating the proba that no-one gets hospitalized\r\n\t\t\thospRisk = hospRisk * (1 - myRisk*hospProba);\r\n\t\t\treaRisk = reaRisk * (1 - myRisk*hospProba*reaProba)\r\n\t\t\tdeathRisk = deathRisk  *(1 - myRisk*hospProba*deathProba)\r\n\t\t\t// Updating the average number of hospitalizations\r\n\t\t\tmoyenneHosp = moyenneHosp + myRisk*hospProba\r\n\t\t\tmoyenneRea = moyenneRea + myRisk*hospProba*reaProba\r\n\t\t\tmoyenneDeaths = moyenneDeaths + myRisk*hospProba*deathProba\r\n\t\t}\r\n\t\trisk = 1-risk;\r\n\t\thospRisk = 1-hospRisk;\r\n\t\treaRisk = 1-reaRisk;\r\n        deathRisk = 1-deathRisk;\r\n        console.log([risk, hospRisk, reaRisk, deathRisk, moyenneHosp, moyenneRea, moyenneDeaths]);\r\n        var res = \r\n\t\tthis.setState({result:[risk, hospRisk, reaRisk, deathRisk, moyenneHosp, moyenneRea, moyenneDeaths]});\r\n    }\r\n\r\n    showResult = () => {\r\n        this.refResult.current.scrollIntoView();\r\n        const result = this.state.result;\r\n        const pop_restante = 66000000 * 0.85; // 66millions moins les environ 15% déjà infectés.\r\n        const nb_christmas = pop_restante/20; // Environ une personne sur 20 va à un rassemblement familial à Noël.\r\n        return (\r\n        <div id =\"family_result\">\r\n        <Box pt=\"1rem\" justify=\"right\" m=\"auto\">\r\n            <List>\r\n                <ListItem> Probabilité qu'une personne au moins ait le covid : {Math.round(result[0] * 100)}%. </ListItem>\r\n                <ListItem> Probabilité qu'une personne soit hospitalisée : {Math.round(result[1]*100)}%. Bilan :\r\n                {Math.round(result[4]*nb_christmas)} hospitalisations supplémentaires à l'échelle de la France.</ListItem>\r\n                <ListItem>Probabilité qu'une personne aille en réa : {Math.round(result[2]*100)}%.\r\n                Bilan : {Math.round(result[5]*nb_christmas)} réas supplémentaires à l'échelle de la France.</ListItem>\r\n                <ListItem>Probabilité qu'une personne meure : {Math.round(result[3]*100)}%.\r\n                Bilan : {Math.round(result[6]*nb_christmas)} morts supplémentaires à l'échelle de la France.</ListItem>\r\n            </List>\r\n        </Box>\r\n      </div>\r\n      )\r\n\r\n    }\r\n\r\n    showMyRisk = () => {\r\n        return (\r\n            <div className=\"addActivity_buttons\">\r\n            <Box pt=\"1rem\" justify=\"right\" m=\"auto\">\r\n            <Grid container spacing={1}   alignItems=\"center\" justify=\"center\">\r\n                <Grid item>\r\n                My risk : {this.props.globalRisk} (reload page to delete)\r\n                </Grid>\r\n            </Grid>\r\n            </Box>\r\n            </div>            \r\n        )\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n        <div id=\"Gatherer_container\">\r\n         <Grid container spacing={1} justify=\"center\" alignitems=\"center\">\r\n                {this.state.peopleCards}\r\n        </Grid>\r\n            <div className=\"addActivity_buttons\">\r\n            <Box pt=\"1rem\" justify=\"right\" m=\"auto\">\r\n            <Grid container spacing={1} alignItems=\"center\" justify=\"center\">\r\n                <Grid item>\r\n                <Fab\r\n                    onClick={() => {this.addPerson(this.defaultPersonArgs)}}\r\n                    color=\"primary\"\r\n                    variant=\"extended\"\r\n                >\r\n                    <AddIcon />\r\n                    <Box p=\"0.5rem\">Personne</Box>\r\n                </Fab>\r\n                </Grid>\r\n                <Grid item>\r\n                <Fab onClick={this.clearAll} color=\"secondary\" variant=\"extended\">\r\n                    <CachedIcon />\r\n                    <Box p=\"0.5rem\">Reset</Box>\r\n                </Fab>\r\n                </Grid>\r\n            </Grid>\r\n            </Box>\r\n            </div>\r\n            <div className=\"addActivity_buttons\">\r\n            <Box pt=\"1rem\" justify=\"right\" m=\"auto\">\r\n            <Grid container spacing={1}   alignItems=\"center\" justify=\"center\">\r\n                <Grid item>\r\n                <Fab\r\n                    onClick={() => {this.toggleResult(); this.computeResult()}}\r\n                    variant=\"extended\"\r\n                >\r\n                    <TouchAppIcon />\r\n                    <Box p=\"0.5rem\">Calculer le bilan</Box>\r\n                </Fab>\r\n                </Grid>\r\n            </Grid>\r\n            </Box>\r\n            </div>\r\n            {this.props.globalRisk!==0 && this.showMyRisk()}\r\n            <div id=\"premade_profiles\">\r\n                {this.generatePremadeCards()}\r\n            </div>  \r\n            <div ref={this.refResult}>\r\n            {this.state.toggleResult && this.showResult()}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Gathering);",["91","92"],"D:\\Dev\\covinsights\\src\\components\\Navbar.js",[],"D:\\Dev\\covinsights\\src\\components\\Calculator\\MyMath.js",["93"],"D:\\Dev\\covinsights\\src\\components\\FamilyGathering\\PersonCard.js",["94","95","96","97","98","99","100","101"],"import React, { Children, Component } from \"react\"\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from \"@material-ui/core/Box\"\r\nimport { IconButton, Button } from \"@material-ui/core\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport {InteractionCrowd, Activity, BasicUniverse, RiskProfile, WorkerRiskProfile, NonWorkerRiskProfile} from '../Calculator/MyMath.js';\r\n\r\nconst propsForForm = {\r\n  bgcolor: \"background.paper\",\r\n  borderColor: \"text.primary\",\r\n  m: \"auto\",\r\n  border: 0,\r\n  style: { width: \"18rem\", height: \"13rem\" },\r\n  boxShadow: 3,\r\n  mx: \"auto\",\r\n  pl: \"1rem\",\r\n  pr: \"2rem\",\r\n  pt: \"0rem\",\r\n}\r\n\r\nconst propsForDisplay = {\r\n  bgcolor: \"background.paper\",\r\n  borderColor: \"text.primary\",\r\n  m: \"auto\",\r\n  border: 0,\r\n  style: { width: \"14rem\", height: \"5rem\" },\r\n  boxShadow: 3,\r\n  mx: \"auto\",\r\n  px: \"1rem\",\r\n}\r\n\r\nclass PersonCard extends Component {\r\n  state = {\r\n    showForm: this.props.showForm,\r\n    id: this.props.id,\r\n    name: this.props.name,\r\n    gender: this.props.gender,\r\n    age: this.props.age,\r\n    risk : this.props.risk,\r\n    activityRisk : 0,\r\n    universe: new BasicUniverse(),\r\n  }\r\n\r\n  handleNameField = (e) => {\r\n    this.setState({name: e.target.value});\r\n  }\r\n\r\n  handleGender = (e) => {\r\n      this.setState({gender:e.target.value});\r\n  }\r\n\r\n  handleAge = (e) => {\r\n      this.setState({age:Number(e.target.value)});\r\n  }\r\n\r\n  handleRisk = (e) => {\r\n      this.setState({risk:Number(e.target.value)});\r\n  }\r\n\r\n  showForm = () => {\r\n    return (\r\n        <Box borderRadius={16} {...propsForDisplay}>\r\n            <Tooltip title=\"Modifier\">\r\n            <IconButton className=\"person_edit_button\" aria-label=\"modify\" size=\"small\" onClick={() => this.setState({ showForm: false })}>\r\n            <EditIcon />\r\n            </IconButton>\r\n            </Tooltip>\r\n            <div className=\"person_delete_button_show\">\r\n                <Tooltip title=\"Supprimer\">\r\n                <IconButton z-index={5000} aria-label=\"delete\" size=\"small\" onClick={() => this.props.delete(this.state.id)}>\r\n                <DeleteIcon />\r\n                </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n            <div className=\"show_name_person\">\r\n                    <span className=\"person_name_inner\">\r\n                    {this.state.name}.\r\n                    </span>\r\n            </div>\r\n        </Box>\r\n    )\r\n  }\r\n\r\n  showCreator = () => {\r\n    return (\r\n        <Box borderRadius={16} {...propsForForm}>\r\n        <div className=\"person_delete_button_creator\">\r\n                <Tooltip title=\"Supprimer\">\r\n                <IconButton z-index={5000} aria-label=\"delete\" size=\"small\" onClick={() => this.props.delete(this.state.id)}>\r\n                <DeleteIcon />\r\n                </IconButton>\r\n                </Tooltip>\r\n        </div>\r\n        <Grid container spacing={1} justify=\"center\" className=\"form_activity_grid\">\r\n                <Grid item className=\"grid_name_activity\">\r\n                  <TextField id=\"outlined-basic\" size=\"small\" style={{width: 180}} label=\"Nom\" variant=\"outlined\" defaultValue={this.state.name} onChange={this.handleNameField} />\r\n                </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} justify=\"center\" className=\"form_inner_grid\">\r\n                <Grid item>\r\n                          <TextField id=\"outlined-basic\" style={{width: 70}} type=\"number\" InputLabelProps={{shrink: true,}} label=\"Age\" variant=\"outlined\" defaultValue={this.state.age} onChange={this.handleAge} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <FormControl variant=\"outlined\">\r\n                        <InputLabel id=\"sexe-label\" left='5px'>Sexe</InputLabel>\r\n                        <Select\r\n                        native \r\n                        labelId=\"sexe-label\"\r\n                        label=\"Sexe\"\r\n                        variant=\"outlined\"\r\n                        id=\"demo-simple-select\"\r\n                        value={this.state.gender}\r\n                        onChange={this.handleGender}\r\n                        >\r\n                        <option value=\"F\">F</option>\r\n                        <option value=\"M\">M</option>\r\n                        <option value=\"ND\">ND</option>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item>\r\n                          <TextField id=\"outlined-basic\" style={{width: 70}} type=\"number\" label=\"Risque(%)\" variant=\"outlined\" defaultValue={this.state.risk} onChange={this.handleRisk} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={() => {this.setState({ showForm: true });\r\n                        this.props.updatePerson(this.state.id, this.state.age, this.state.gender, this.state.risk)}}\r\n                    >\r\n                        {\" \"}\r\n                        Submit\r\n                    </Button>\r\n                </Grid>\r\n        </Grid>\r\n  </Box>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"personCard_container\">\r\n          {this.state.showForm ? this.showForm() : this.showCreator()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default PersonCard;\r\n",["102","103"],"D:\\Dev\\covinsights\\src\\reportWebVitals.js",[],"D:\\Dev\\covinsights\\src\\components\\Calculator\\RiskForm.js",["104"],"import React, { Children, Component } from \"react\"\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Box from \"@material-ui/core/Box\"\r\nimport { IconButton, Button } from \"@material-ui/core\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {InteractionCrowd, Activity, BasicUniverse, RiskProfile, WorkerRiskProfile, NonWorkerRiskProfile} from './MyMath.js';\r\n\r\nconst styles = (theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 80,\r\n  },\r\n    root: {\r\n    display: 'flex',\r\n    pt: \"2rem\",\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  },\r\n});\r\n\r\nconst propsForForm = {\r\n  bgcolor: \"background.paper\",\r\n  borderColor: \"text.primary\",\r\n  m: \"auto\",\r\n  border: 0,\r\n  style: { width: \"17rem\", height: \"35rem\" },\r\n  boxShadow: 3,\r\n  mx: \"auto\",\r\n  px: \"1rem\",\r\n  pt: \"2rem\",\r\n}\r\n\r\nconst propsForDisplay = {\r\n  bgcolor: \"background.paper\",\r\n  borderColor: \"text.primary\",\r\n  m: \"auto\",\r\n  border: 0,\r\n  style: { width: \"16rem\", height: \"5rem\" },\r\n  boxShadow: 3,\r\n  mx: \"auto\",\r\n  px: \"1rem\",\r\n  position:\"relative\",\r\n  bottom:\"2rem\"\r\n}\r\n\r\nclass RiskForm extends Component {\r\n  state = {\r\n    showForm: this.props.showForm,\r\n    id: this.props.id,\r\n    name: this.props.name,\r\n    duration: this.props.duration,\r\n    wearMask: this.props.wearMask,\r\n    nbPeople: this.props.nbPeople,\r\n    nbMasked:this.props.nbMasked,\r\n    outdoors: this.props.outdoors,\r\n    talking: this.props.talking,\r\n    distance: this.props.distance,\r\n    riskProfile: this.props.riskProfile,\r\n    risk : 0,\r\n    heures:Math.floor(this.props.duration/60),\r\n    minutes:this.props.duration % 60,\r\n    activity:new Activity(),\r\n    universe: new BasicUniverse(),\r\n  }\r\n\r\n  setActivityRisk = () => {\r\n    // setting the duration.\r\n    var newDuration = 60*this.state.heures + this.state.minutes;\r\n    this.setState({duration:newDuration})\r\n    var maskProportion = 0;\r\n    if(this.state.nbMasked === 0)\r\n    {\r\n      maskProportion = 0;\r\n    }\r\n    else{\r\n      maskProportion = this.state.nbPeople / this.state.nbMasked;\r\n    }\r\n    var interaction = new InteractionCrowd(this.state.name, newDuration, this.state.nbPeople, this.state.wearMask, maskProportion, this.state.talking, this.state.outdoors, this.state.distance);\r\n    var profile = new RiskProfile();\r\n    // Note that the cap at 50% is before applying the profile.\r\n    // The risk profile represents a variation in the prevalence, not the\r\n    // activity itself.\r\n    if(this.state.riskProfile === \"worker\")\r\n    {\r\n      profile = new WorkerRiskProfile();\r\n    }\r\n   if(this.state.riskProfile === \"nonWorker\")\r\n    {\r\n      profile = new NonWorkerRiskProfile();\r\n    }\r\n    var result = Math.round((profile.getProfileRisk()*interaction.getActivityRisk() + Number.EPSILON) * 100) / 100;\r\n    this.setState({risk: result});\r\n    var myActivity = new Activity(interaction, profile, this.state.universe);\r\n    this.setState({activity:myActivity});\r\n    this.props.updateRisk(this.props.id[0], result, myActivity);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setActivityRisk();\r\n  }\r\n\r\n  getRisk = () => {\r\n    this.setActivityRisk();\r\n    return this.state.risk;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.checked })\r\n  }\r\n\r\n  handleNameField = (e) => {\r\n    this.setState({\r\n      name: e.target.value\r\n  });\r\n  }\r\n\r\n  handleNbPeople = (event) => {\r\n    this.setState({nbPeople:Number(event.target.value)});\r\n  };\r\n\r\n  handleNbMasked = (event) => {\r\n    this.setState({nbMasked:Number(event.target.value)});\r\n  };\r\n\r\n  handleHours = (event) => {\r\n    this.setState({heures:Number(event.target.value)})\r\n  }\r\n\r\n  handleMinutes = (event) => {\r\n    this.setState({minutes:Number(event.target.value)});\r\n  }\r\n\r\n  handleTalking = (event) => {\r\n    this.setState({talking:event.target.value});\r\n  };\r\n\r\n  handleDistance = (event) => {\r\n    this.setState({distance:event.target.value});\r\n  };\r\n\r\n  handleRiskProfile = (event) => {\r\n    this.setState({riskProfile:event.target.value});\r\n  };\r\n\r\n  generateNbPeople1 = (i) => {\r\n    return (\r\n    <option value={i}>{i}</option>\r\n    );\r\n  }\r\n\r\n  generateNbPeople = () => {\r\n    const numbers = [0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    return numbers.map((number) => this.generateNbPeople1(number));\r\n  }\r\n\r\n  showForm = () => {\r\n    return (\r\n      <div className=\"risk_form\">\r\n      <Tooltip title=\"Modifier\">\r\n      <IconButton className=\"edit_button\" aria-label=\"delete\" size=\"small\" onClick={() => {this.setState({ showForm: false }); this.props.edit()}}>\r\n        <EditIcon />\r\n      </IconButton>\r\n      </Tooltip>\r\n      <Box borderRadius={16} {...propsForDisplay}>\r\n          {this.props.children}\r\n          <div className=\"show_activity\">\r\n            {this.state.name}. {/*Risque : {this.state.risk} */}\r\n          </div>\r\n      </Box>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  showCreator = () => {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className=\"risk_form_creator\">\r\n      <Box borderRadius={16} {...propsForForm}>\r\n            <Grid container spacing={1} justify=\"center\" className=\"form_activity_grid\">\r\n                  <Grid item className=\"grid_name_activity\">\r\n                      <TextField id=\"outlined-basic\" size=\"small\" style={{width: 180}} label=\"Nom de l'activité\" variant=\"outlined\" defaultValue={this.state.name} onChange={this.handleNameField} />\r\n                  </Grid>\r\n                  <Grid container spacing={1} justify=\"center\" className=\"form_inner_grid\">\r\n                      <Grid item>\r\n                          <TextField id=\"outlined-basic\" style={{width: 90}} type=\"number\" InputLabelProps={{shrink: true,}} label=\"heures\" variant=\"outlined\" defaultValue={this.state.heures} onChange={this.handleHours} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                          <TextField id=\"outlined-basic\" style={{width: 90}} type=\"number\" InputLabelProps={{shrink: true,}} label=\"minutes\" variant=\"outlined\" defaultValue={this.state.minutes} onChange={this.handleMinutes} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControlLabel\r\n                          control={<Checkbox color=\"primary\" checked={this.state.outdoors}\r\n                            onChange={this.handleChange}\r\n                            name=\"outdoors\"\r\n                            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                          />} label=\"Est-ce en extérieur ?\" />\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControlLabel\r\n                          control={<Checkbox color=\"primary\" checked={this.state.wearMask}\r\n                            onChange={this.handleChange}\r\n                            name=\"wearMask\"\r\n                            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                          />} label=\"Portez-vous un masque ?\" />\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                          <InputLabel id=\"demo-simple-select-label\">Nb people</InputLabel>\r\n                          <Select\r\n                            native \r\n                            id=\"demo-simple-select\"\r\n                            value={this.state.nbPeople}\r\n                            onChange={this.handleNbPeople}\r\n                            label=\"Nb people\"\r\n                          >\r\n                            {this.generateNbPeople()}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                          <InputLabel id=\"demo-simple-select-label\">Masks</InputLabel>\r\n                          <Select\r\n                            native \r\n                            id=\"demo-simple-select\"\r\n                            value={this.state.nbMasked}\r\n                            onChange={this.handleNbMasked}\r\n                            label=\"Nb people\"\r\n                          >\r\n                            {this.generateNbPeople()}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControl className={classes.formControl}>\r\n                          <InputLabel id=\"demo-simple-select-label\">Conversation</InputLabel>\r\n                          <Select\r\n                            native \r\n                            id=\"demo-simple-select\"\r\n                            value={this.state.talking}\r\n                            onChange={this.handleTalking}\r\n                            label=\"Nb people\"\r\n                          >\r\n                            <option value=\"normal\">Normale</option>\r\n                            <option value=\"quiet\">Sans parler</option>\r\n                            <option value=\"loud\">Forte</option>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControl className={classes.formControl}>\r\n                          <InputLabel id=\"demo-simple-select-label\">Distance</InputLabel>\r\n                          <Select\r\n                            native \r\n                            style={{width: 90}}\r\n                            id=\"demo-simple-select\"\r\n                            value={this.state.distance}\r\n                            onChange={this.handleDistance}\r\n                            label=\"Nb people\"\r\n                          >\r\n                            <option value=\"normal\">Normale (1m)</option>\r\n                            <option value=\"close\">Proche (&le;30cm)</option>\r\n                            <option value=\"long\">Longue (2m)</option>\r\n                            <option value=\"veryLong\">Très longue (&ge;3m)</option>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                      <Grid item>\r\n                      <FormControl className={classes.formControl}>\r\n                          <InputLabel id=\"demo-simple-select-label\">Risk profile</InputLabel>\r\n                          <Select\r\n                            native \r\n                            id=\"demo-simple-select\"\r\n                            value={this.state.riskProfile}\r\n                            onChange={this.handleRiskProfile}\r\n                          >\r\n                            <option value=\"average\">Standard</option>\r\n                            <option value=\"worker\">Travailleur de première ligne</option>\r\n                            <option value=\"nonWorker\">Télétravaille</option>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Grid>\r\n                  </Grid>\r\n            </Grid>\r\n            <br/>\r\n            <div className={classes.root}>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => {this.setState({ showForm: true }); this.setActivityRisk()}}\r\n              >\r\n                {\" \"}\r\n                Submit\r\n              </Button>\r\n            </div>\r\n      </Box>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"riskForm_container\">\r\n          {this.state.showForm ? this.showForm() : this.showCreator()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nRiskForm.defaultProps = {\r\n  showForm: false,\r\n  wearMask: false,\r\n  nbPeople: 0,\r\n  maskProportion: 0,\r\n  outdoors: false,\r\n  talking: \"normal\",\r\n  distance: \"normal\",\r\n}\r\nexport default withStyles(styles)(RiskForm);\r\n","D:\\Dev\\covinsights\\src\\css\\GlobalStyle.js",[],["105","106"],"D:\\Dev\\covinsights\\src\\index.js",[],["107","108"],"D:\\Dev\\covinsights\\src\\pages\\Error.js",[],"D:\\Dev\\covinsights\\src\\pages\\home.js",[],"D:\\Dev\\covinsights\\src\\pages\\calculator.js",[],"D:\\Dev\\covinsights\\src\\components\\Calculator\\Evolution.js",[],"D:\\Dev\\covinsights\\src\\pages\\familyGathering.js",["109"],"import React, {Component} from \"react\";\r\nimport Gathering from \"../components/FamilyGathering/Gatherer.js\";\r\n\r\nclass FamilyGathering extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n            <div className=\"family_presentation\">\r\n                <h2>\r\n                 Bienvenue dans le simulateur de réunion familiale !\r\n                </h2>\r\n            </div>\r\n            <Gathering globalRisk={this.props.globalRisk} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FamilyGathering;","D:\\Dev\\covinsights\\src\\css\\ContactFormWrapper.js",[],"D:\\Dev\\covinsights\\src\\components\\Layout.js",["110"],"D:\\Dev\\covinsights\\src\\css\\Theme.js",["111"],"D:\\Dev\\covinsights\\src\\components\\constants\\activities.js",["112"],"D:\\Dev\\covinsights\\src\\css\\CardWrapper.js",[],{"ruleId":"113","severity":1,"message":"114","line":10,"column":22,"nodeType":"115","messageId":"116","endLine":10,"endColumn":28},{"ruleId":"117","severity":1,"message":"118","line":80,"column":14,"nodeType":"115","messageId":"119","endLine":80,"endColumn":17},{"ruleId":"113","severity":1,"message":"120","line":140,"column":13,"nodeType":"115","messageId":"116","endLine":140,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":154,"column":28,"nodeType":"123","messageId":"124","endLine":154,"endColumn":30},{"ruleId":"113","severity":1,"message":"125","line":178,"column":13,"nodeType":"115","messageId":"116","endLine":178,"endColumn":16},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"113","severity":1,"message":"130","line":400,"column":7,"nodeType":"115","messageId":"116","endLine":400,"endColumn":21},{"ruleId":"113","severity":1,"message":"131","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"132","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":16},{"ruleId":"113","severity":1,"message":"133","line":8,"column":8,"nodeType":"115","messageId":"116","endLine":8,"endColumn":24},{"ruleId":"113","severity":1,"message":"134","line":14,"column":9,"nodeType":"115","messageId":"116","endLine":14,"endColumn":25},{"ruleId":"113","severity":1,"message":"135","line":14,"column":27,"nodeType":"115","messageId":"116","endLine":14,"endColumn":35},{"ruleId":"113","severity":1,"message":"136","line":14,"column":52,"nodeType":"115","messageId":"116","endLine":14,"endColumn":63},{"ruleId":"113","severity":1,"message":"137","line":14,"column":65,"nodeType":"115","messageId":"116","endLine":14,"endColumn":82},{"ruleId":"113","severity":1,"message":"138","line":14,"column":84,"nodeType":"115","messageId":"116","endLine":14,"endColumn":104},{"ruleId":"126","replacedBy":"139"},{"ruleId":"128","replacedBy":"140"},{"ruleId":"113","severity":1,"message":"131","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"126","replacedBy":"141"},{"ruleId":"128","replacedBy":"142"},{"ruleId":"126","replacedBy":"143"},{"ruleId":"128","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":6,"column":5,"nodeType":"147","messageId":"148","endLine":8,"endColumn":6},{"ruleId":"113","severity":1,"message":"149","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":13},{"ruleId":"150","severity":1,"message":"151","line":1,"column":1,"nodeType":"152","endLine":13,"endColumn":2},{"ruleId":"150","severity":1,"message":"153","line":1,"column":1,"nodeType":"152","endLine":123,"endColumn":4},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-redeclare","'key' is already defined.","redeclared","'i' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'res' is assigned a value but never used.","no-native-reassign",["154"],"no-negated-in-lhs",["155"],"'PersonWithRisk' is defined but never used.","'Children' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'InteractionCrowd' is defined but never used.","'Activity' is defined but never used.","'RiskProfile' is defined but never used.","'WorkerRiskProfile' is defined but never used.","'NonWorkerRiskProfile' is defined but never used.",["154"],["155"],["154"],["155"],["154"],["155"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Paper' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]